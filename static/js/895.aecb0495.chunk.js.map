{"version":3,"file":"static/js/895.aecb0495.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/ContactsPage/Contacts.styled.jsx","pages/ContactsPage/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.value;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts\n      .filter(contact => contact.name.toLowerCase().includes(normalizeFilter))\n      .sort((a, b) => {\n        const itemA = a.name.toUpperCase();\n        const itemB = b.name.toUpperCase();\n        return itemA < itemB ? -1 : itemA > itemB ? 1 : 0;\n      });\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form as FormikForm, Field } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border: 1px solid #000;\n  border-radius: 5px;\n  background-color: #8a9ec1;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-weight: 700;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: #fff;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: 4px;\n  border: 1px solid #000;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:hover,\n  &:focus,\n  &:active {\n    outline: none;\n    box-shadow: 0px 0px 4px 2px rgba(255, 255, 255, 0.7);\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: #fff;\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nexport const AddButton = styled.button`\n  padding: 4px 10px;\n  align-self: flex-end;\n  border: 1px solid #000;\n  border-radius: 5px;\n  font-size: 14px;\n  cursor: pointer;\n\n  &:hover {\n    color: #fff;\n    background-color: #8a9ec1;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Form, Label, Input, ErrorText, AddButton } from './ContactForm.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onAddContact = contact => {\n    const isInContacts = contacts.some(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase().trim()\n    );\n    if (isInContacts) {\n      return toast.warn(`${contact.name} is already in  contacts`);\n    }\n    dispatch(addContact(contact));\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required('Name is required'),\n    number: Yup.string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Number is required'),\n  });\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        onAddContact(values);\n        resetForm();\n      }}\n    >\n      <Form autoComplete=\"off\">\n        <Label>\n          Name:\n          <Input type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </Label>\n        <Label>\n          Number:\n          <Input type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" />\n        </Label>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-size: 18px;\n  font-weight: 700;\n  color: #8a9ec1;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 4px;\n  border: 1px solid #000;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:hover,\n  &:focus,\n  &:active {\n    outline: none;\n    box-shadow: 0px 0px 4px 2px #8a9ec1;\n  }\n\n  &:disabled {\n    border: 1px solid #8a9ec1;\n    box-shadow: none;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts, selectFilter } from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filterId = nanoid();\n\n  const handleChangeFilter = event => {\n    dispatch(setFilter(event.target.value.trim()));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor={filterId}>\n        Find contacts by name\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          id={filterId}\n          value={filter}\n          onChange={handleChangeFilter}\n          disabled={contacts.length === 0}\n        />\n      </FilterLabel>\n    </FilterContainer>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const EmptyContactListText = styled.p`\n  text-align: center;\n  font-size: 18px;\n  font-weight: 700;\n`;\n","import styled from '@emotion/styled';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nexport const Text = styled.div`\n  display: flex;\n  flex-grow: 2;\n  justify-content: space-between;\n\n  font-size: 14px;\n  font-weight: 700;\n`;\n\nexport const DeleteButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 2px 10px;\n  border: 1px solid #8a9ec1;\n  border-radius: 5px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: 0.3s;\n\n  &:hover {\n    color: #fff;\n    background-color: #8a9ec1;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FaRegTrashCan } from 'react-icons/fa6';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { Contact, Text, DeleteButton } from './ContactItem.styled';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <Contact key={contact.id}>\n      <Text>\n        <p>{contact.name} :</p>\n        <p>{contact.number}</p>\n      </Text>\n      <DeleteButton\n        type=\"button\"\n        onClick={handleDelete}\n        aria-label=\"Delete contact\"\n      >\n        <FaRegTrashCan />\n      </DeleteButton>\n    </Contact>\n  );\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { Contacts, EmptyContactListText } from './ContactList.styled';\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return filteredContacts.length > 0 ? (\n    <Contacts>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} contact={{ id, name, number }} />\n      ))}\n    </Contacts>\n  ) : (\n    <EmptyContactListText children=\"There are no contacts.\" />\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from 'react';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <MagnifyingGlass />\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 320px;\n  margin: 60px auto;\n  padding: 10px;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const SubTitle = styled.h2`\n  text-align: center;\n  margin: 20px 0;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport ContactForm from '../../components/ContactForm';\nimport Filter from '../../components/Filter';\nimport ContactList from '../../components/ContactList';\nimport Loader from '../../components/Loader';\nimport { Container, Title, SubTitle } from './Contacts.styled';\n\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { selectIsLoading, selectError } from '../../redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title children=\"Phonebook\" />\n\n      <ContactForm />\n      <SubTitle children=\"Contacts\" />\n      <Filter />\n      {isLoading && <Loader />}\n      {error && toast.error(error)}\n      <ContactList />\n      <ToastContainer />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","value","selectFilteredContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","sort","a","b","itemA","toUpperCase","itemB","Form","styled","FormikForm","Label","Input","Field","ErrorText","AddButton","FormError","render","message","useSelector","dispatch","useDispatch","validationSchema","Yup","required","number","matches","initialValues","onSubmit","values","resetForm","some","trim","toast","addContact","onAddContact","autoComplete","type","FilterContainer","FilterLabel","FilterInput","filterId","nanoid","htmlFor","id","onChange","event","setFilter","target","disabled","length","Contacts","EmptyContactListText","Contact","Text","DeleteButton","onClick","deleteContact","filteredContacts","map","children","LoaderContainer","Container","Title","SubTitle","useEffect","fetchContacts"],"sourceRoot":""}